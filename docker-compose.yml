version: '3.9'
services:
  pgdb:
    image: postgres:latest
    container_name: pgdb
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - ~/.docker/pgdata:/var/lib/postgresql/data
    healthcheck:
      test:
        ['CMD', 'pg_isready', '-U', '${POSTGRES_USER}', '-d', '${POSTGRES_DB}']
      interval: 5s
      timeout: 30s
      retries: 5
    networks:
      - testNetwork
  api:
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      WTSECRET: ${JWT_SECRET}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgdb:5432/${POSTGRES_DB}?schema=public
    build:
      dockerfile: Dockerfile
      context: .
      args:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
        JWTSECRET: ${JWT_SECRET}
        DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgdb:5432/${POSTGRES_DB}?schema=public
    volumes:
      - .:/usr/src/app
    command: yarn start:prod
    ports:
      - 3000:3000
    depends_on:
      pgdb:
        condition: service_healthy
    networks:
      - testNetwork
networks:
  testNetwork:
    driver: bridge
