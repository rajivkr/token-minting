version: '3.9'
services:
  api:
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      WTSECRET: ${JWT_SECRET}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgdb:5433/${POSTGRES_DB}?schema=public
    build:
      dockerfile: Dockerfile
      context: .
      target: development
      args:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
        JWTSECRET: ${JWT_SECRET}
        DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgdb:5433/${POSTGRES_DB}?schema=public
    volumes:
      - .:/usr/src/app
    command: yarn dev:all
    ports:
      - 3000:3000
      - 8000:8000
      - 5433:5433
    networks:
      - testnetwork
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres:latest
    container_name: db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '5433:5432'
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 100s
      retries: 5
    networks:
      - testnetwork
networks:
  testnetwork:
    driver: bridge
